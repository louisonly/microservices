spring boot 与redis 整合参考博客
https://www.bysocket.com/?p=1756

4.6.1	实现原理说明
lib-database.jar用于实现数据库读写，集成了mybatis持久层框架与redis数据库缓存。
在每次进行增删查改操作时，通过与redis交互减少数据库的负担，并加快查询速度。以在Emp表中的查询为例，当服务第一次调用接口查询Emp表中id=1的数据时，会先在redis缓存中查询，若缓存中无数据，则在数据库中查询，并将返回值存进redis缓存中，在该缓存失效前，下次调用统一查询就会直接从redis缓存中取数据，而不会再查询数据库。

lib-database.jar模块的结构如下：
 
1）	MSDB.java
外部接口，init()用于主调函数中初始化本模块，该函数对redis的主机、端口号、连接池以及flyway数据库版本管理工具进行了配置，使用代码的形式将这些属性添加到.properties属性配置中。
2）	CacheConfiguration.java
用于配置redis缓存。
keyGenerator()配置redis键生成策略（根据策略生成key的示例如下com.huawei.mdt.service.TestEmpServicegetEmpByNameSMITH）
cacheManager()用于定制缓存管理器，可在其中设置缓存管理器的相关属性，如设置缓存过期时间。
redisTemplate()用于生成redisTemplate，它是直接与redis进行交互的对象，其返回值为RedisTemplate<String,String>即对应redis中的键值对。其中，使用到了Jackson中的Jackson2JsonRedisSerializer对存储的对象 (key-value中的value)进行序列化，将其转换成Json字符串再存进redis中，并结合keyGenerator生成相应的键值对。在使用Jackson进行POJO对象序列化时，可以设置对象的哪些属性不需要被序列化，在相应属性的get函数上添加@JsonIgnore注释即可。
3）	MybatisConfiguration.java
用于配置mybatis持久层框架。
其中设置了mybatis的实体类、mapper以及配置文件的位置；并获取在.properties中配置的数据源。（由此处可见，引入了该依赖后，需要手动配置的内容有两个：mybatis-config.xml和datasource数据源）
 
该类中的其他实现有：
sqlSessionFactory()函数，SqlSessionFactory是单个数据库映射关系经过编译后的内存镜像，一旦被创建，应在整个应用执行期间都存在，因此应使用单例模式。它是创建SqlSession的工厂。SqlSession是执行持久化操作的对象，是应用层和持久层之间执行交互操作的一个单线程对象，每个线程有自己的SqlSession对象，且不能共享，使用完应确保关闭该sqlsession。
PageHelper()，集成了mybatis分页查询插件，方便分页查询。
4）	SqlPrintInterceptor.java
打印输出sql执行的相关信息，在debug模式下打开，会在控制台输出sql语句以及执行耗时信息，如下：
执行sql耗时:147 ms - id:com.huawei.mdt.mapper.EmpMapper.selectByExample - Sql: select EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO from SCOTT.EMP WHERE ( COMM is not null )
4.6.2	使用说明
大致流程如下：引入依赖 —> bootstrap.properties中配置oracle数据源 —> classpath:mybatis/mybatis-config.xml配置 —> 通过mybatis-generator或其他方式进行调用。

1）引入依赖
		<dependency>
			<groupId>com.huawei.mdt</groupId>
			<artifactId>lib-database</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

2）配置oracle数据源
spring.datasource.url=jdbc:oracle:thin:@oracle:1521:orcl
spring.datasource.username=scott
spring.datasource.password=toor
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver

3）配置mybatis-config.xml
在src/main/resources下新建文件夹mybatis，在mybatis/中新建文件mybatis-config.xml，并添加以下内容（可根据需要进行增删修改）：
<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE configuration  
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
     "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
	    <!-- 使全局的映射器启用或禁用缓存。 -->
		<setting name="cacheEnabled" value="true" />
		<!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->
		<setting name="lazyLoadingEnabled" value="true" />
		<!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 -->        
         <setting name="aggressiveLazyLoading" value="true"/>        
         <!-- 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true -->
		<setting name="useColumnLabel" value="true" />
		<!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false  -->
		<setting name="useGeneratedKeys" value="false" />
		<!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射　PARTIAL:部分  FULL:全部  -->
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）  -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		
		<setting name="defaultStatementTimeout" value="25" />
		
		<setting name="defaultFetchSize" value="100" />
		
		<setting name="safeRowBoundsEnabled" value="false" />
		<!-- 使用驼峰命名法转换字段。 -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
		<!-- 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->
		<setting name="localCacheScope" value="SESSION" />
		<!-- 默认为OTHER,为了解决oracle插入null报错的问题要设置为NULL -->
		<setting name="jdbcTypeForNull" value="NULL" />
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
	</settings>
</configuration>

4）创建entity、mapper
根据下图创建相应的entity、mapper包，以及resources/mybatis/mapper文件夹
 

然后使用mybatis-generator工具生成实体类以及mapper接口（使用时需要在pom.xml中添加generator的依赖），generatorConfig.xml设置如下（注意修改其中的jdbc驱动包、driverclass、connectionURL、username、password以及生成table，且不要修改以下设置entity、dao、mapper的生成路径）：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
 
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="D:\\maven\\com\\oracle\\ojdbc14\\10.2.0.4.0\\ojdbc14-10.2.0.4.0.jar"/>
 
    <context id="default" targetRuntime="MyBatis3">
 
 
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true" />
        </commentGenerator>
 
        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@localhost:1521:orcl" userId="scott" password="toor">
        </jdbcConnection>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.huawei.mdt.entity" targetProject="src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
 
        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mybatis/mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
 
 
        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.huawei.mdt.mapper" targetProject="src/main/java" type="MIXEDMAPPER">
        </javaClientGenerator>
 
        <table tableName="BONUS" schema="scott"></table>
        <table tableName="DEPT" schema="scott"></table>
        <table tableName="EMP" schema="scott"></table>
        <table tableName="SALGRADE" schema="scott"></table>
    </context>
</generatorConfiguration>
然后使用命令：mybatis-generator:generate，控制台输出build success时即为创建成功，可以看到相应包路径下生成的文件。

5）实现service以及controller
Service：
@Service
@Transactional(readOnly=true,rollbackFor=Exception.class)
public class TestEmpService {
	
	@Autowired
	private EmpMapper empMapper;
	
	/*
	 * 获取表中全部内容，保存在empCache中（value/cacheNames属性可看做命名空间）
	 * 执行后查询empCache~keys可看到缓存数据，key=com.huawei.mdt.service.TestEmpServicegetAllEmp，其内容是一个ArrayList列表
	 */
	//@Transactional(propagation=Propagation.REQUIRED,isolation=Isolation.DEFAULT,readOnly=false)
	@CachePut(value="empCache")
	public List<Emp> getAllEmp(){
		EmpExample empExample = new EmpExample();
		empExample.or().andCommIsNotNull();
		return empMapper.selectByExample(empExample);
	}
	
	/*
	 * 根据name获取emp，保存在nameCache中
	 * 执行后在nameCache~keys中保存缓存数据：
	 * 			key=com.huawei.mdt.service.TestEmpServicegetEmpByNameSMITH
	 * 			key=com.huawei.mdt.service.TestEmpServicegetEmpByNameALLEN
	 * 			……
	 */
	@Cacheable(value="nameCache")
	public List<Emp> getEmpByName(String name){
		System.out.println("根据Name="+name+",在数据库中查询...");
		EmpExample example = new EmpExample();
		example.or().andEnameEqualTo(name);
		List<Emp> list = empMapper.selectByExample(example);
		for(Emp emp: list)
			System.out.println("Name:"+emp.getEname());
		return list;
	}
	
	public PageInfo<Emp> queryPage(int pageNum,int pageSize){
		Page<Emp> page = PageHelper.startPage(pageNum, pageSize);
		EmpExample empExample = new EmpExample();
		empExample.or().andCommIsNotNull();
		this.empMapper.selectByExample(empExample);
		return page.toPageInfo();
	}
}

Controller：
@RestController
public class TestEmpController {
	
	@Autowired
	private TestEmpService testEmpService;
	
	@ApiOperation(value="查询Emp表中的全部信息")
	@GetMapping("/getAll")
	public List<Emp> getAll(){
		return testEmpService.getAllEmp();
	}
	
	@ApiOperation(value="Mybatis分页插件PageHelper使用示例")
	@RequestMapping("/queryPage")
	@ResponseBody
	public String queryPage() {
		PageInfo<Emp> page = testEmpService.queryPage(1, 2);
		System.out.println("总页数："+page.getPages());
		System.out.println("总记录数："+page.getTotal());
		for(Emp emp:page.getList()) {
			System.out.println(emp.getEmpno()+"\t"+emp.getEname());
		}
		return "Success!!!";
	}
	
	@ApiOperation(value="根据name查询emp")
	@GetMapping("/getEmpByName/{name}")
	public List<Emp> getEmpById(@PathVariable("name") String name) {
		return testEmpService.getEmpByName(name);
	}
}

4.6.3	缓存注解说明
1）	@Cacheable
先在缓存中查询，如果没有就查询数据库，并将返回值保存到缓存中。即指明此方法或类的所有方法的返回结果可缓存，可以通过参数列表或keyGenerator来指定缓存的key的生成规则，也可以用SpEL来指定key的生成规则或指定添加缓存的条件。
在lib-database.jar中已经定义keyGenerator： 因此该注解可以这样使用：
@Cacheable(value="nameCache")，其中value等价于cacheNames，即指定该函数/类缓存的redis“命名空间/集合”

2）	@CachePut
指明该方法（或当前类的所有方法）的所有返回结果均会触发缓存。如：
@CachePut(value="empCache")

3）	@CacheEvict
指明该方法触发清除缓存，缓存中加上allEntities=true则清除所有缓存。如：
@CacheEvict(value = "usercache", keyGenerator="keyGenerator")
	public boolean clearUser(String no,String name){
		LogCore.BASE.debug("invoke clear:{},{}", no, name);
		return true;
		}

4）	Condition、unless以及SpEL表达式
如下示例，condition对传入参数进行筛选；unless对返回结果进行筛选。
	@Cacheable(value = "usercache", keyGenerator = "keyGenerator",condition="#name!=null", unless = "#result==null")
	public User getUser(String no, String name) {
		LogCore.BASE.debug("invoke getUser:{},{}", no, name);
		if (Util.anyNonEmpty(no, name)) {
			return new User(no, name);
		}
		return null;
}

4.6.4 缓存与数据库一致性问题
	1）场景一：更新时先更新数据库，然后删除缓存
		存在问题：若删除缓存失败，会造成数据库和缓存不一致
		解决方案：先删除缓存，删除成功再更新数据库；若缓存删除失败，则不更新数据库，此时只会造成服务取出旧数据，而不会造成数据不一致。
	2）场景二：高并发场景下，删除缓存后，数据库还没更新完，有新的查询请求到来，发现缓存中没有数据，于是在数据库更新完之前将旧数据再次缓存到redis中，然后数据库更新成功，造成数据不一致。
		解决方案：创建队列，如20个，每次有更新请求时，对商品ID求hash值，然后对20取模，将更新请求放到队列中，若有查询请求到来，则先查看队列中是否有更新请求，若有更新，则将该查询请求添加到同一队列中，等更新完成后再查询。
